// Code generated by mockery v2.42.2. DO NOT EDIT.

package messagers

import (
	context "context"

	amqp091 "github.com/rabbitmq/amqp091-go"

	mock "github.com/stretchr/testify/mock"
)

// MockConsumer is an autogenerated mock type for the Consumer type
type MockConsumer struct {
	mock.Mock
}

// ProcessMessage provides a mock function with given fields: ctx, d
func (_m *MockConsumer) ProcessMessage(ctx context.Context, d amqp091.Delivery) error {
	ret := _m.Called(ctx, d)

	if len(ret) == 0 {
		panic("no return value specified for ProcessMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, amqp091.Delivery) error); ok {
		r0 = rf(ctx, d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartListening provides a mock function with given fields: ctx, exchangeName, queueName, routingKey
func (_m *MockConsumer) StartListening(ctx context.Context, exchangeName string, queueName string, routingKey string) error {
	ret := _m.Called(ctx, exchangeName, queueName, routingKey)

	if len(ret) == 0 {
		panic("no return value specified for StartListening")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, exchangeName, queueName, routingKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StopListening provides a mock function with given fields:
func (_m *MockConsumer) StopListening() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for StopListening")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// isRetryable provides a mock function with given fields: err
func (_m *MockConsumer) isRetryable(err error) bool {
	ret := _m.Called(err)

	if len(ret) == 0 {
		panic("no return value specified for isRetryable")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(error) bool); ok {
		r0 = rf(err)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewMockConsumer creates a new instance of MockConsumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConsumer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConsumer {
	mock := &MockConsumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
